#!/usr/bin/env python3
"""
Script de test manuel pour valider tous les composants
Placer √† la racine du projet et ex√©cuter: python test_manual.py
"""

import sys
import os

# Ajouter le r√©pertoire courant au PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Test des imports de base"""
    print("\n=== Test Imports de Base ===")
    try:
        import fastapi
        print(f"‚úÖ FastAPI version: {fastapi.__version__}")
    except ImportError as e:
        print(f"‚ùå FastAPI: {e}")
        return False
    
    try:
        import uvicorn
        print(f"‚úÖ Uvicorn import√©")
    except ImportError as e:
        print(f"‚ùå Uvicorn: {e}")
        return False
    
    try:
        from openai import OpenAI
        print("‚úÖ OpenAI v1.x import√© correctement")
    except ImportError as e:
        print(f"‚ùå OpenAI: {e}")
        return False
    
    try:
        import numpy
        import sklearn
        print("‚úÖ NumPy et Scikit-learn OK")
    except ImportError as e:
        print(f"‚ùå ML libraries: {e}")
        return False
    
    try:
        import pytest
        print(f"‚úÖ Pytest version: {pytest.__version__}")
    except ImportError as e:
        print(f"‚ùå Pytest: {e}")
        return False
    
    try:
        import locust
        print("‚úÖ Locust import√©")
    except ImportError as e:
        print(f"‚ùå Locust: {e}")
        return False
    
    return True

def test_sanitization():
    """Test du module sanitization"""
    print("\n=== Test Sanitization ===")
    try:
        from app.core.sanitization import Sanitizer
        
        # Test normal
        result = Sanitizer.sanitize_input("Hello world")
        print(f"‚úÖ Sanitisation normale: '{result}'")
        
        # Test HTML
        result = Sanitizer.sanitize_input("<script>alert('test')</script>Hello")
        print(f"‚úÖ Suppression HTML: '{result}'")
        
        # Test output sanitization
        result = Sanitizer.sanitize_output("Hello\x00World\x1F")
        print(f"‚úÖ Sanitisation output: '{result}'")
        
        # Test longueur (devrait √©chouer)
        try:
            long_text = "a" * 1500
            Sanitizer.sanitize_input(long_text)
            print("‚ùå Validation longueur a √©chou√©")
            return False
        except ValueError:
            print("‚úÖ Validation longueur fonctionne")
        
        print("‚úÖ Module sanitization fonctionne")
        return True
    except Exception as e:
        print(f"‚ùå Erreur sanitization: {e}")
        return False

def test_similarity():
    """Test du module similarity"""
    print("\n=== Test Similarity Calculator ===")
    try:
        from app.core.similarity import SimilarityCalculator
        
        calc = SimilarityCalculator()
        
        # Test cosine
        score = calc.cosine_sim("artificial intelligence", "machine learning")
        print(f"‚úÖ Cosine similarity: {score:.4f}")
        if not (0 <= score <= 1):
            print("‚ùå Score cosine hors limite")
            return False
        
        # Test jaccard
        score = calc.jaccard_sim("hello world", "world hello")
        print(f"‚úÖ Jaccard similarity: {score:.4f}")
        if not (0 <= score <= 1):
            print("‚ùå Score jaccard hors limite")
            return False
        
        # Test textes identiques
        score = calc.cosine_sim("test", "test")
        print(f"‚úÖ Textes identiques: {score:.4f}")
        if score < 0.9:  # Devrait √™tre proche de 1
            print("‚ùå Score textes identiques trop bas")
            return False
        
        # Test LLM fallback (sans cl√© API)
        score = calc.llm_based_sim("test", "test")
        print(f"‚úÖ LLM-based similarity: {score:.4f}")
        
        print("‚úÖ Module similarity fonctionne")
        return True
    except Exception as e:
        print(f"‚ùå Erreur similarity: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_llm_proxy():
    """Test du module LLM proxy"""
    print("\n=== Test LLM Proxy ===")
    try:
        from app.core.llm_proxy import LLMClient
        
        client = LLMClient()
        print(f"‚úÖ LLM Client initialis√© (model: {client.model})")
        
        # Test sans cl√© API (devrait donner un message d'erreur propre)
        response = client.generate("Hello")
        print(f"‚úÖ Generate response: '{response[:50]}...'")
        
        # V√©rifier que c'est soit une erreur propre soit une vraie r√©ponse
        if "not configured" in response or "Error" in response or len(response) > 10:
            print("‚úÖ R√©ponse LLM appropri√©e")
        else:
            print("‚ùå R√©ponse LLM inattendue")
            return False
        
        # Test similarity sans cl√© API
        score = client.similarity("test", "test")
        print(f"‚úÖ LLM similarity: {score}")
        if not (0 <= score <= 1):
            print("‚ùå Score LLM hors limite")
            return False
        
        print("‚úÖ Module LLM proxy fonctionne")
        return True
    except Exception as e:
        print(f"‚ùå Erreur LLM proxy: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config():
    """Test du module configuration"""
    print("\n=== Test Configuration ===")
    try:
        from app.config import Config
        
        print(f"‚úÖ PORT: {Config.PORT}")
        print(f"‚úÖ SIMILARITY_THRESHOLD: {Config.SIMILARITY_THRESHOLD}")
        print(f"‚úÖ DEFAULT_METRIC: {Config.DEFAULT_METRIC}")
        print(f"‚úÖ LLM_MODEL: {Config.LLM_MODEL}")
        print(f"‚úÖ MAX_INPUT_LENGTH: {Config.MAX_INPUT_LENGTH}")
        
        # Test validation
        issues = Config.validate()
        if issues:
            print("‚ö†Ô∏è  Configuration warnings:")
            for issue in issues:
                print(f"  - {issue}")
            # Les warnings sont OK, pas d'erreur bloquante
        else:
            print("‚úÖ Configuration parfaite")
        
        # V√©rifier les valeurs critiques
        if Config.SIMILARITY_THRESHOLD < 0 or Config.SIMILARITY_THRESHOLD > 1:
            print("‚ùå SIMILARITY_THRESHOLD invalide")
            return False
        
        if Config.MAX_INPUT_LENGTH <= 0:
            print("‚ùå MAX_INPUT_LENGTH invalide")
            return False
        
        print("‚úÖ Module config fonctionne")
        return True
    except Exception as e:
        print(f"‚ùå Erreur config: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_api_imports():
    """Test des imports API"""
    print("\n=== Test API Imports ===")
    try:
        from app.api.endpoints import router
        print("‚úÖ API endpoints import√©s")
        
        from app.main import app
        print("‚úÖ FastAPI app import√©e")
        
        # V√©rifier que l'app a les bonnes routes
        routes = [route.path for route in app.routes]
        print(f"‚úÖ Routes disponibles: {routes}")
        
        if "/api/similarity-check" not in str(routes):
            print("‚ùå Route similarity-check manquante")
            return False
        
        print("‚úÖ Module API fonctionne")
        return True
    except Exception as e:
        print(f"‚ùå Erreur API imports: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_file_structure():
    """Test de la structure des fichiers"""
    print("\n=== Test Structure Fichiers ===")
    required_files = [
        "app/__init__.py",
        "app/main.py", 
        "app/config.py",
        "app/core/__init__.py",
        "app/core/similarity.py",
        "app/core/sanitization.py", 
        "app/core/llm_proxy.py",
        "app/api/__init__.py",
        "app/api/endpoints.py",
        "tests/load_test/locustfile.py",
        "requirements.txt",
        "Dockerfile"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} manquant")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå {len(missing_files)} fichiers manquants")
        return False
    
    print("‚úÖ Structure des fichiers OK")
    return True

def main():
    """Fonction principale"""
    print("üß™ D√âMARRAGE DES TESTS MANUELS")
    print("=" * 50)
    
    # Liste des tests √† ex√©cuter
    tests = [
        ("Structure fichiers", test_file_structure),
        ("Imports de base", test_imports),
        ("Configuration", test_config),
        ("Sanitization", test_sanitization),
        ("Similarity", test_similarity),
        ("LLM Proxy", test_llm_proxy),
        ("API Imports", test_api_imports)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç Ex√©cution: {test_name}")
        print("-" * 30)
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ {test_name} R√âUSSI")
            else:
                print(f"‚ùå {test_name} √âCHOU√â")
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© final
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        print(f"{test_name:20} : {status}")
        if result:
            passed += 1
    
    print("-" * 50)
    print(f"Total: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS PASSENT !")
        print("‚úÖ Le service est pr√™t √† √™tre d√©marr√©")
        print("\nProchaines √©tapes:")
        print("1. uvicorn app.main:app --port 8003")
        print("2. Tester l'API avec curl ou le navigateur")
        return True
    else:
        print("‚ö†Ô∏è  CERTAINS TESTS √âCHOUENT")
        print("‚ùå Corrigez les erreurs avant de continuer")
        print("\nActions recommand√©es:")
        if passed < total // 2:
            print("- V√©rifiez que tous les fichiers sont pr√©sents")
            print("- R√©installez les d√©pendances: pip install -r requirements.txt")
        else:
            print("- V√©rifiez les modules qui √©chouent")
            print("- Consultez les messages d'erreur ci-dessus")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)